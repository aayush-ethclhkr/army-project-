import hashlib
import os
import subprocess
import pefile
import yara
import sys
from colorama import Fore, Style, init
import tempfile
from fpdf import FPDF
import tkinter as tk
from tkinter import filedialog, messagebox

init(autoreset=True)


def get_file_hashes(filepath):
    try:
        with open(filepath, 'rb') as f:
            file_data = f.read()
        md5 = hashlib.md5(file_data).hexdigest()
        sha256 = hashlib.sha256(file_data).hexdigest()
        return md5, sha256
    except Exception as e:
        return None, None


def extract_suspicious_strings(filepath):
    try:
        output = subprocess.check_output(['strings', filepath], text=True)
        lines = output.split('\n')
        sus_strings = [s for s in lines if any(x in s.lower() for x in ['http', 'cmd', 'powershell', '.onion', 'token', 'keylogger'])]
        return sus_strings[:20]
    except Exception as e:
        return [f"Error extracting strings: {str(e)}"]


def analyze_pe_file(filepath):
    try:
        pe = pefile.PE(filepath)
        imports = []
        if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                imports.append(entry.dll.decode('utf-8'))
        return imports
    except Exception as e:
        return [f"Not a PE file or error: {str(e)}"]


def match_yara_rules(filepath):
    yara_rule = '''
rule Suspicious_Downloader
{
    meta:
        description = "Detects strings commonly used in downloaders"
    strings:
        $a = "powershell"
        $b = "http://"
        $c = "cmd /c"
        $d = "System.Net.WebClient"
    condition:
        any of them
}
'''
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.yar') as tmp_rule:
            tmp_rule.write(yara_rule.encode())
            tmp_rule_path = tmp_rule.name
        rules = yara.compile(filepath=tmp_rule_path)
        matches = rules.match(filepath)
        os.remove(tmp_rule_path)
        return [str(match) for match in matches]
    except Exception as e:
        return [f"Error in YARA scan: {str(e)}"]


def generate_pdf_report(file_path, md5, sha256, sus_strings, imports, yara_matches):
    try:
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(200, 10, f"Malware Report for {os.path.basename(file_path)}", ln=True)

        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, f"MD5: {md5}", ln=True)
        pdf.cell(200, 10, f"SHA256: {sha256}", ln=True)

        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, "Suspicious Strings:", ln=True)
        pdf.set_font("Arial", size=10)
        for s in sus_strings:
            pdf.multi_cell(0, 6, f"-> {s}")

        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, "PE Imports:", ln=True)
        pdf.set_font("Arial", size=10)
        for imp in imports:
            pdf.cell(200, 6, f"-> {imp}", ln=True)

        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, "YARA Matches:", ln=True)
        pdf.set_font("Arial", size=10)
        for match in yara_matches:
            pdf.cell(200, 6, f"-> {match}", ln=True)

        output_path = os.path.splitext(file_path)[0] + "_report.pdf"
        pdf.output(output_path)
        return output_path
    except Exception as e:
        return f"Error generating PDF: {str(e)}"


def scan_file(filepath):
    print(Fore.CYAN + f"\nüîç Scanning File: {filepath}\n")
    md5, sha256 = get_file_hashes(filepath)
    if md5 is None or sha256 is None:
        print(Fore.RED + "[!] Error reading file hashes.")
        return

    print(Fore.YELLOW + f"[+] MD5: {md5}")
    print(f"[+] SHA256: {sha256}")

    yara_matches = match_yara_rules(filepath)
    if yara_matches:
        print(Fore.RED + "[!] YARA Matches:")
        for match in yara_matches:
            print("   ->", match)

    sus_strings = extract_suspicious_strings(filepath)
    if sus_strings:
        print(Fore.MAGENTA + "\n[+] Suspicious Strings Found:")
        for s in sus_strings:
            print("   ->", s)

    imports = analyze_pe_file(filepath)
    print(Fore.BLUE + "\n[+] PE File Imports:")
    for imp in imports:
        print("   ->", imp)


    pdf_path = generate_pdf_report(filepath, md5, sha256, sus_strings, imports, yara_matches)
    if pdf_path.startswith("Error"):
        print(Fore.RED + f"[!] {pdf_path}")
        return

    print(Fore.GREEN + f"\n[*] PDF report generated: {pdf_path}")

    if yara_matches or sus_strings:
        print(Fore.RED + "\n[!] File Status: SUSPICIOUS ‚ùå")
    else:
        print(Fore.GREEN + "\n[*] File Status: CLEAN ‚úÖ")


def analyze_file_gui():
    file_path = filedialog.askopenfilename(title="Select suspicious file", filetypes=[("Executable Files", "*.exe")])
    if not file_path:
        return

    try:
        md5, sha256 = get_file_hashes(file_path)
        if md5 is None or sha256 is None:
            messagebox.showerror("Error", "Unable to read file hashes.")
            return

        yara_matches = match_yara_rules(file_path)
        sus_strings = extract_suspicious_strings(file_path)
        imports = analyze_pe_file(file_path)
        pdf_path = generate_pdf_report(file_path, md5, sha256, sus_strings, imports, yara_matches)

        if pdf_path.startswith("Error"):
            messagebox.showerror("Error", pdf_path)
            return

        result_text.delete(1.0, tk.END)
        result_text.insert(tk.END, f"[+] MD5: {md5}\n")
        result_text.insert(tk.END, f"[+] SHA256: {sha256}\n\n")
        result_text.insert(tk.END, "[!] YARA Matches:\n")
        for match in yara_matches:
            result_text.insert(tk.END, f"‚Üí {match}\n")
        result_text.insert(tk.END, "\n[+] Suspicious Strings Found:\n")
        for s in sus_strings:
            result_text.insert(tk.END, f"‚Üí {s}\n")
        result_text.insert(tk.END, "\n[+] PE Imports:\n")
        for imp in imports:
            result_text.insert(tk.END, f"‚Üí {imp}\n")

        messagebox.showinfo("PDF Generated", f"Report saved at:\n{pdf_path}")
    except Exception as e:
        messagebox.showerror("Error", str(e))


root = tk.Tk()
root.title("Hacker Bhai - Malware Analyzer for Small Biz üõ°Ô∏è")
root.geometry("700x600")

tk.Label(root, text="Malware Analyzer", font=("Arial", 16, "bold")).pack(pady=10)
tk.Button(root, text="üîç Select File & Analyze", command=analyze_file_gui, font=("Arial", 12)).pack(pady=10)

result_text = tk.Text(root, wrap=tk.WORD, font=("Courier", 10))
result_text.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)

root.mainloop()
